{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-database-concepts-index-mdx-397552b8c46ab0d6ce73.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://minimal-blog/./content/posts/database-concepts/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    h4: \"h4\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Databases are used to store information. We take information from some source and put it in database where it gets persisted in either memory or hard disk and we eventually retrieve that data at some point in time. Database clients are used to connect to databases. SQL is a programming language used to interact with databases.\"), \"\\n\", React.createElement(_components.p, null, \"Simple database design process questions:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"What kind of thing are we storing?\"), \"\\n\", React.createElement(_components.li, null, \"What properties does this thing have?\"), \"\\n\", React.createElement(_components.li, null, \"What type of data does each of those properties contain?\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Tables\"), \"\\n\", React.createElement(_components.p, null, \"A table is a collection of records that are related to each other. A table is made up of columns and rows. \", React.createElement(_components.strong, null, \"Columns\"), \" are also called fields and \", React.createElement(_components.strong, null, \"rows\"), \" are also called records. A table is also called a \", React.createElement(_components.strong, null, \"relation\"), \". In relational databases, and flat file databases, a table is a set of data elements (values) using a model of vertical columns (identifiable by name) and horizontal rows, the cell being the unit where a row and column intersect. A table has a specified number of columns, but can have any number of rows. Columns store some information about specific properties of records. Rows represent a single, implicitly structured data item in a table.\"), \"\\n\", React.createElement(_components.h3, null, \"Creating a table and inserting data\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"-- Create a table called tablename1, with the two columns shown, for\\n-- the database currently in use. Lots of other options are available\\n-- for how you specify the columns, such as their datatypes.\\nCREATE TABLE tablename1 (fname VARCHAR(20), lname VARCHAR(20));\\n\\n-- Insert a row of data into the table tablename1. This assumes that the\\n-- table has been defined to accept these values as appropriate for it.\\nINSERT INTO tablename1 VALUES('Richard','Mutt');\\n-- another format: INSERT INTO tablename1 (fname, lname) VALUES('Richard','Mutt');\\n\\n-- inserting multiple rows:\\nINSERT INTO tablename1 VALUES('Ethan','Hunt'),('Marcel','Duchamp');\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"SQL statements consist of Keywords, Options, and Identifiers. \", React.createElement(_components.strong, null, \"Keywords\"), \" are the words that make up the SQL statement, which specify what needs to be done on the database. \", React.createElement(_components.strong, null, \"Options\"), \" are the words that modify the statement. \", React.createElement(_components.strong, null, \"Identifiers\"), \" are the names of the things that the statement is acting on. SQL is not just about pulling raw data out of a table, but it can also transform or process data before we retrieve it. For any SQL statement, the database first considers the data source, applies the filter criteria, and then selects and retrieves specified columns from the data source.\"), \"\\n\", React.createElement(_components.h3, null, \"Retrieving, updating and deleting data from a table\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"-- Select all rows and columns from the current database's departments table.\\n-- Default activity is for the interpreter to scroll the results on your screen.\\nSELECT * FROM departments;\\n\\n-- Retrieve all rows from the departments table, but only the dept_no and dept_name columns.\\n-- Splitting up commands across lines is OK.\\nSELECT dept_no, dept_name FROM departments;\\n\\n-- Retrieve all departments columns, but just 5 rows.\\nSELECT * FROM departments LIMIT 5;\\n\\n-- Retrieve dept_name column values from the departments\\n-- table where the dept_name value has the substring 'en'.\\nSELECT dept_name FROM departments WHERE dept_name LIKE '%en%';\\n\\n-- Retrieve all columns from the departments table where the dept_name\\n-- column starts with an 'S' and has exactly 4 characters after it.\\nSELECT * FROM departments WHERE dept_name LIKE 'S____';\\n\\n-- Select title values from the titles table but don't show duplicates.\\nSELECT DISTINCT title FROM titles;\\n\\n-- Same as above, but sorted (case-sensitive) by the title values.\\nSELECT DISTINCT title FROM titles ORDER BY title;\\n\\n-- Show the number of rows in the departments table.\\nSELECT COUNT(*) FROM departments;\\n\\n-- Show the number of rows in the departments table that\\n-- have 'en' as a substring of the dept_name value.\\nSELECT COUNT(*) FROM departments WHERE dept_name LIKE '%en%';\\n\\n-- In tablename1, change the fname value to 'John'\\n-- for all rows that have an lname value of 'Mutt'.\\nUPDATE tablename1 SET fname='John' WHERE lname='Mutt';\\n\\n-- Delete rows from the tablename1 table\\n-- where the lname value begins with 'M'.\\nDELETE FROM tablename1 WHERE lname LIKE 'M%';\\n\\n-- Delete all rows from the tablename1 table, leaving the empty table.\\nDELETE FROM tablename1;\\n\\n-- Remove the entire tablename1 table.\\nDROP TABLE tablename1;\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Table relationships\"), \"\\n\", React.createElement(_components.p, null, \"Relationship types between tables: one-to-one, one-to-many, many-to-one, many-to-many.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Primary Key\"), \" - uniquely identifies a record in the table. Each row in every table has one primary key, which never changes.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Foreign Key\"), \" - identifies a record (usually in another table) that a particular row is associated with. The 'many' side of the relationship usually gets the foreign key column. Many rows in the same table can have the same foreign key, which can change if the relationship changes.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"-- Foreign Key example\\nCREATE TABLE photos (\\n    id SERIAL PRIMARY KEY,\\n    url VARCHAR(200),\\n    user_id INTEGER REFERENCES users(id)\\n);\\n-- SERIAL datatype in Postgres automatically generates integer values for specified column, starting from 1.\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Data consistency\"), \" - the state of the data in a database when all foreign key references are valid. If a foreign key references a primary key that doesn't exist, the data is inconsistent.\"), \"\\n\", React.createElement(_components.p, null, \"There are some deletion constraints that can be used in foreign key references:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"ON DELETE RESTRICT\"), \" - the default, which prevents deletion of a row if it is referenced by a foreign key in another table and throws an error\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"ON DELETE NO ACTION\"), \" - same as RESTRICT\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"ON DELETE CASCADE\"), \" - deletes all rows that reference the deleted row\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"ON DELETE SET NULL\"), \" - sets the foreign key value to NULL for all rows that reference the deleted row\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"ON DELETE SET DEFAULT\"), \" - sets the foreign key value to the default value for all rows that reference the deleted row\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"SQL joins\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Inner join\"), \" - returns rows that have matching values in both tables involved in the join. The join condition is specified in the WHERE clause. The INNER keyword is optional. It is the default join type.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Left outer join\"), \" - returns all rows from the left table, and the matched rows from the right table. Null values are returned for the right table if there is no match.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Right outer join\"), \" - returns all rows from the right table, and the matched rows from the left table. Null values are returned for the left table if there is no match.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Full outer join\"), \" - returns all rows from both tables, regardless of whether there is a match or not. If there is no match, NULL values are used.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Joins\"), \" - produce values by merging together rows from different related tables. Joins are used most of times when we are asked to find data that involves multiple resources.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Aggregation\"), \" - looks at many rows and calculates a single value. Words like 'sum', 'average', 'maximum', 'minimum', 'count' are used in aggregation.\"), \"\\n\", React.createElement(_components.p, null, \"Table order between \\\"FROM\\\" and \\\"JOIN\\\" frequently makes a difference. We must give context if column names collide during joins. Tables can be renamed during joins using the \\\"AS\\\" keyword.\"), \"\\n\", React.createElement(_components.h2, null, \"Grouping and Aggregation\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Grouping\"), \" - divides rows into groups and applies an aggregate function to each group. The \", React.createElement(_components.code, null, \"GROUP BY\"), \" clause is used to group rows together. The \", React.createElement(_components.code, null, \"GROUP BY\"), \" clause must be after the \", React.createElement(_components.code, null, \"FROM\"), \" and \", React.createElement(_components.code, null, \"WHERE\"), \" clauses, but before the \", React.createElement(_components.code, null, \"ORDER BY\"), \" clause. The \", React.createElement(_components.code, null, \"GROUP BY\"), \" clause can group by multiple columns. The \", React.createElement(_components.code, null, \"GROUP BY\"), \" clause can also group by column numbers instead of column names.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Aggregation\"), \" - looks at many rows and calculates a single value. Words like 'sum', 'average', 'maximum', 'minimum', 'count' are used in aggregation. The \", React.createElement(_components.code, null, \"HAVING\"), \" clause is used to filter groups. The \", React.createElement(_components.code, null, \"HAVING\"), \" clause must be after the \", React.createElement(_components.code, null, \"GROUP BY\"), \" clause, but before the \", React.createElement(_components.code, null, \"ORDER BY\"), \" clause. The \", React.createElement(_components.code, null, \"HAVING\"), \" clause can use aggregate functions. The \", React.createElement(_components.code, null, \"HAVING\"), \" clause can use column numbers instead of column names.\"), \"\\n\", React.createElement(_components.h3, null, \"Sorting\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"ORDER BY\"), \" clause is used to sort rows. The \", React.createElement(_components.code, null, \"ORDER BY\"), \" clause must be after the \", React.createElement(_components.code, null, \"FROM\"), \", \", React.createElement(_components.code, null, \"WHERE\"), \", and \", React.createElement(_components.code, null, \"GROUP BY\"), \" clauses, but before the \", React.createElement(_components.code, null, \"LIMIT\"), \" clause. The \", React.createElement(_components.code, null, \"ORDER BY\"), \" clause can sort by multiple columns, where column specification is considered as prioritization order. The \", React.createElement(_components.code, null, \"ORDER BY\"), \" clause can sort by column numbers and expressions as well.\\n\", React.createElement(_components.code, null, \"LIMIT\"), \" clause is used to limit the number of rows returned. \", React.createElement(_components.code, null, \"OFFSET\"), \" clause is used to skip a specified number of rows before returning the rest.\"), \"\\n\", React.createElement(_components.h3, null, \"Union and Intersection\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"UNION\"), \" operator is used to combine the result-set of two or more \", React.createElement(_components.code, null, \"SELECT\"), \" statements. Each \", React.createElement(_components.code, null, \"SELECT\"), \" statement within \", React.createElement(_components.code, null, \"UNION\"), \" must have the same number of columns. The columns must also have similar data types. The columns in each \", React.createElement(_components.code, null, \"SELECT\"), \" statement must also be in the same order. The \", React.createElement(_components.code, null, \"UNION\"), \" operator selects only distinct values by default. To allow duplicate values, use the \", React.createElement(_components.code, null, \"UNION ALL\"), \" operator. The \", React.createElement(_components.code, null, \"UNION\"), \" operator selects only distinct values by default. To allow duplicate values, use the \", React.createElement(_components.code, null, \"UNION ALL\"), \" operator.\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"INTERSECT\"), \" operator is used to combine the result-set of two or more \", React.createElement(_components.code, null, \"SELECT\"), \" statements, but returns rows only from the first \", React.createElement(_components.code, null, \"SELECT\"), \" statement that are identical to a row in the second \", React.createElement(_components.code, null, \"SELECT\"), \" statement. The \", React.createElement(_components.code, null, \"INTERSECT\"), \" operator selects only distinct values by default. To allow duplicate values, use the \", React.createElement(_components.code, null, \"INTERSECT ALL\"), \" operator. Similarly, the \", React.createElement(_components.code, null, \"EXCEPT\"), \" operator is used to combine the result-set of two or more \", React.createElement(_components.code, null, \"SELECT\"), \" statements, but returns rows only from the first \", React.createElement(_components.code, null, \"SELECT\"), \" statement that are not identical to a row in the second \", React.createElement(_components.code, null, \"SELECT\"), \" statement. The \", React.createElement(_components.code, null, \"EXCEPT\"), \" operator selects only distinct values by default. To allow duplicate values, use the \", React.createElement(_components.code, null, \"EXCEPT ALL\"), \" operator.\"), \"\\n\", React.createElement(_components.h2, null, \"Data storage in Postgres\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"SHOW data_directory\"), \" - \", React.createElement(_components.code, null, \"SHOW\"), \" keyword is used to retrieve individual configuration options; in this case it retrieves the location path to the directory where Postgres stores its data. All data for different databases get placed in \", React.createElement(_components.code, null, \"base\"), \" directory. \", React.createElement(_components.code, null, \"SELECT oid, datname FROM pg_database;\"), \" provides a list of all databases and their unique identifiers, where \", React.createElement(_components.code, null, \"oid\"), \" stands for object identifier. Different folders having oid names are present within \", React.createElement(_components.code, null, \"base\"), \" directory. \", React.createElement(_components.code, null, \"SELECT * from pg_class;\"), \" provides a list of all objects and their unique identifiers for a database; these unique identifiers are used as file names within these folders. \", React.createElement(_components.code, null, \"SELECT * FROM pg_stats WHERE tablename = 'users';\"), \" - provides different statistics about a table, including the number of rows and the size of the table.\"), \"\\n\", React.createElement(_components.h3, null, \"File terminologies:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Heap or Heap File\"), \" - file that contains all the data (rows) of a table (not related to heap data structure)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Tuple or Item\"), \" - Individual row from the table\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Block or Page\"), \" - the heap file is divided into many different \\\"blocks\\\" or \\\"pages\\\". Each page/block stores some number of rows. By default they are 8KB in size. The number of rows that can be stored in a page depends on the size of the rows. The more rows that can fit in a page, the more efficient the database is.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Full Table Scan\"), \" - scenario when the database engine has to read every row in a table to find the rows that match the query. This is very slow, especially for large tables. In this case Postgres has to load all the rows stored in heap file into memory, and then execute some kind of iteration over these rows to find some matching number of records.\"), \"\\n\", React.createElement(_components.h2, null, \"Indexes\"), \"\\n\", React.createElement(_components.p, null, \"Index - a data structure that makes it faster to find rows in a table. It efficiently tells us exactly what block and index a particular record is stored at. Indexes are created on columns. Indexes are stored in a data structure that is optimized for searching, so searching is faster than scanning the whole table. Indexes are not free. They take up space on disk, can be large as they store data from at least one column of the real table, and they slow down writes as they need to be updated for every insert/update/delete operation. Indexes are automatically created for primary keys and unique constraints, which can be viewed using the following query:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT relname, relkind\\nFROM pg_class -- this table lists all different objects present in database\\nWHERE relkind = 'i';\\n\")), \"\\n\", React.createElement(_components.p, null, \"Example to create an index on a column: \", React.createElement(_components.code, null, \"CREATE INDEX idx_person_name ON person (name);\"), \". If we don't provide a name, it will be assigned automatically in this format: \", React.createElement(_components.code, null, \"<table-name>_<column-name>_idx\"), \". \", React.createElement(_components.code, null, \"SELECT pg_size_pretty(pg_relation_size('idx_person_name'));\"), \" - provides the size of the index.\"), \"\\n\", React.createElement(_components.p, null, \"Keywords used for benchmarking and evaluating queries, but not for real data fetching:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"EXPLAIN\"), \" - keyword which builds a query plan and displays info about it without actually executing the query.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"EXPLAIN ANALYZE\"), \" - keyword which provides information about the query plan (strategy that the database engine uses to execute the query), query execution time and query results. It builds a query plan, runs it and then provides information about it.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Within the results of these keywords, the rows having \", React.createElement(_components.code, null, \"->\"), \" are called \", React.createElement(_components.strong, null, \"query nodes\"), \", which indicate some step where we are trying to access data stored in database, or trying to do some processing. The top row is a query node as well. Order of evaluation: inner most node to the outer most top node. Within each row, the first phrase (example: \", React.createElement(_components.code, null, \"Hash Join\"), \") represents how the node is generating data, second phrase (\", React.createElement(_components.code, null, \"cost\"), \") - amount of processing power required for that step, third phrase (\", React.createElement(_components.code, null, \"rows\"), \") - estimate of how many rows this step will produce, and last phrase (\", React.createElement(_components.code, null, \"width\"), \") - estimate of average number of bytes of each row.\"), \"\\n\", React.createElement(_components.h3, null, \"Index Types:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"B-Tree Index\"), \" - default index type in Postgres. It is a balanced tree data structure. It is sorted by the column that we are indexing. It is very efficient for equality and range queries.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Hash Index\"), \" - it is a hash table data structure. It is very efficient for equality queries, but not for range queries.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"GiST Index\"), \" - it is a generalized search tree data structure used for geometry, full-text search.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"SP-GiST Index\"), \" - space partitioned GiST index is used for clustered data, such as dates - where many rows might have the same value.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"GIN Index\"), \" - it is a generalized inverted index. Used for columns that contain arrays or JSON data.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"BRIN Index\"), \" - it is a block range index. It is very efficient for range queries and specialized for really large datasets.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"How indexes are created\"), \"\\n\", React.createElement(_components.p, null, \"First, we identify the column that we want to create an index on, for which we want to have a fast lookup. Then we extract only the property that we want to do fast lookups by and the block / index for that property. These values are sorted in a meaningful order (ascending / descending) and organize them into a tree data structure. They are evenly distributed in the leaf nodes of the tree, in a left to right fashion. Helpers are added to root nodes of tree to make it easier to traverse the tree. The tree is then stored on disk.\"), \"\\n\", React.createElement(_components.p, null, \"When an SQL query is given to Postgres, parser interprets the meaning of every character in the query first, and builds a \", React.createElement(_components.strong, null, \"query tree\"), \", which is essentially a programmatic description of the query to run. Then it is passed to \", React.createElement(_components.strong, null, \"rewriter\"), \", which decomposes views into underlying table references, expands wildcards, and so on. Then it is passed to \", React.createElement(_components.strong, null, \"planner\"), \", which generates a \", React.createElement(_components.strong, null, \"query plan\"), \", which is a strategy that the database engine uses to execute the query in the most efficient way. The query plan is then passed to executor, which executes the query plan and returns the results.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Cost = amount of processing power required for a particular step in the query plan\\n\\nCost = ((number of pages read sequentially) * seq_page_cost)\\n    + ((number of pages read randomly) * random_page_cost)\\n    + ((number of rows scanned) * cpu_tuple_cost)\\n    + ((number of index entries scanned) * cpu_index_tuple_cost)\\n    + ((number of times function / operator evaluated) * cpu_operator_cost)\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Common Table Expressions (CTE)\"), \"\\n\", React.createElement(_components.p, null, \"CTE is a temporary result set that is defined within the execution scope of a single SQL statement. It is similar to a derived table in that it is not stored as an object and lasts only for the duration of the query. Unlike a derived table, a CTE can be self-referencing and can be referenced multiple times in the same query. CTEs are defined using \", React.createElement(_components.code, null, \"WITH\"), \" keyword before the main query.\"), \"\\n\", React.createElement(_components.p, null, \"There are two forms of CTEs: \", React.createElement(_components.strong, null, \"non-recursive\"), \" and \", React.createElement(_components.strong, null, \"recursive\"), \". Non-recursive CTEs are used to define temporary result sets that can be referenced multiple times in a query. Recursive CTEs are used to define temporary result sets that reference themselves. Recursive CTEs are used to solve problems that involve hierarchical data (tree or graph-type data structure), such as organizational charts, bill of materials, and parts explosion, and they must use a \\\"union\\\" keyword unlike simple / non-recursive CTEs.\"), \"\\n\", React.createElement(_components.p, null, \"Example for recursive CTE:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"WITH RECURSIVE countdown(val) AS (\\n    SELECT 3 as val -- initial or non-recursive query\\n    UNION\\n    SELECT val - 1 FROM countdown WHERE val > 1 -- recursive query\\n)\\nSELECT * from countdown;\\n\\n-- Output: 3, 2, 1\\n\")), \"\\n\", React.createElement(_components.p, null, \"Working of recursive CTEs:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Postgres defines the results table for the non-recursive query, and working table for the recursive query\"), \"\\n\", React.createElement(_components.li, null, \"It runs the initial non-recursive statement, put the results into the results table and working table\"), \"\\n\", React.createElement(_components.li, null, \"It then runs the recursive statement replacing the table name with a reference to the working table\"), \"\\n\", React.createElement(_components.li, null, \"If recursive statement returns some rows, it appends them to the results table and runs recursion again. If it doesn't return any rows, it stops recursion.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Views\"), \"\\n\", React.createElement(_components.p, null, \"A View is a virtual table that consists of a subset of data contained in a table. They are built on top of tables or other views. Views are used for security purposes, to hide the complexity of queries, and to provide a layer of abstraction between the user and the database. Views are created using \", React.createElement(_components.code, null, \"CREATE VIEW\"), \" statement. Views can be created from a single table, multiple tables, or other views and can be referenced in a place where we would normally reference a table. Views can be created with or without check option. Check option is used to prevent the user from updating the view in a way that would produce rows that are not included in the view.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Materialized Views\"), \" - they are similar to views, but they store the results of the query in a table-like structure. They are used to improve the performance of queries that involve expensive operations, such as aggregations, joins, etc. They are updated periodically, either manually or automatically. They are created using \", React.createElement(_components.code, null, \"CREATE MATERIALIZED VIEW\"), \" statement. These contain queries that get executed only at very specific times, but the results are saved and can be referenced without running the query. \", React.createElement(_components.code, null, \"WITH DATA\"), \" keyword is used to populate the materialized view with data. \", React.createElement(_components.code, null, \"WITH NO DATA\"), \" keyword is used to create an empty materialized view. \", React.createElement(_components.code, null, \"REFRESH MATERIALIZED VIEW\"), \" keyword is used to refresh the materialized view.\"), \"\\n\", React.createElement(_components.h2, null, \"Transactions\"), \"\\n\", React.createElement(_components.p, null, \"A transaction is a logical unit of work that contains one or more SQL statements. A transaction is an atomic unit. The effects of all the SQL statements in a transaction can be either all committed (applied to the database) or all rolled back (undone from the database). Transactions are created using \", React.createElement(_components.code, null, \"BEGIN\"), \" keyword. They are committed using \", React.createElement(_components.code, null, \"COMMIT\"), \" keyword. They are rolled back using \", React.createElement(_components.code, null, \"ROLLBACK\"), \" keyword. Transactions are used to ensure data integrity and consistency. They are used to ensure that the database remains in a consistent state, even in the event of power failure, errors, etc. Transactions are used to ensure that all the statements in a transaction are executed successfully, or none of them are executed at all. If any statement in a transaction fails, the entire transaction will be present in an \\\"aborted\\\" state, from which we must rollback. Losing the connection to database will automatically rollback the transaction.\"), \"\\n\", React.createElement(_components.h3, null, \"Schema Migration Files\"), \"\\n\", React.createElement(_components.p, null, \"Schema migration files are used to make changes to the database schema. They are used to create, modify, or delete tables, indexes, views, etc. They are used to make changes to the database schema in a consistent and repeatable way that is safe and reversible, which can be used to keep track of changes over time. A schema migration file can be written in any programming language, and it contains 2 different sections: \", React.createElement(_components.code, null, \"up\"), \" and \", React.createElement(_components.code, null, \"down\"), \". \", React.createElement(_components.code, null, \"up\"), \" section is used to make changes to the database schema, and \", React.createElement(_components.code, null, \"down\"), \" section is used to undo the changes made in the \", React.createElement(_components.code, null, \"up\"), \" section. Schema migration files are executed in the order in which they are created. They are executed in a transaction, which means that if any of the statements in the schema migration file fails, the entire schema migration file will be rolled back.\"), \"\\n\", React.createElement(_components.h3, null, \"Multi-Version Concurrency Control (MVCC)\"), \"\\n\", React.createElement(_components.p, null, \"Multi-Version Concurrency Control (MVCC) is a technique used by PostgreSQL to allow multiple transactions to access the same data concurrently without conflicts or delays. It ensures that each transaction has a consistent snapshot of the database and can operate on its own version of the data.\"), \"\\n\", React.createElement(_components.h4, null, \"How MVCC Works\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"When a transaction starts, it gets a unique transaction ID (TXID). This ID is later used to keep track of changes made by the transaction.\"), \"\\n\", React.createElement(_components.li, null, \"When a transaction reads data, it only sees the data that was committed before the transaction started, as well as any changes it made itself. This ensures that every transaction has a consistent view of the database.\"), \"\\n\", React.createElement(_components.li, null, \"Whenever a transaction modifies data (INSERT, UPDATE, or DELETE), PostgreSQL creates a new version of the affected rows and assigns the new version the same TXID as the transaction. These new versions are called \\\"tuples\\\".\"), \"\\n\", React.createElement(_components.li, null, \"Other transactions running at the same time will only see the old versions of the modified rows since their snapshots are still based on the earlier state of the data.\"), \"\\n\", React.createElement(_components.li, null, \"When a transaction is committed, PostgreSQL checks for conflicts (such as two transactions trying to modify the same row). If there are no conflicts, the changes are permanently applied to the database, and other transactions can now see the updated data.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"Write Ahead Log (WAL)\"), \"\\n\", React.createElement(_components.p, null, \"The Write Ahead Log is a technique where any modification to the data is first recorded in the log before being written into the main data storage. The primary purpose of the WAL is to guarantee that the database state is recoverable to a consistent state even in the event of a crash or hardware failure.\"), \"\\n\", React.createElement(_components.h4, null, \"How WAL Works\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Write operation:\"), \" When a change is made to the data, PostgreSQL writes the changes to the WAL buffer instead of immediately modifying the disk pages.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Flush operation:\"), \" Once the transaction is committed, the WAL buffer contents are flushed to the on-disk WAL file.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Checkpoint:\"), \" The background writer process writes the 'dirty' pages from the shared buffer to the main data files at specific intervals called 'checkpoints.' It ensures that the actual data files are updated to match the state recorded in the WAL logs.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"Stages of Query Processing\"), \"\\n\", React.createElement(_components.p, null, \"Query processing in PostgreSQL involves several stages, from parsing SQL queries to producing the final result set:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Parsing\"), \": This is the first stage in query processing, where the SQL query is broken down into smaller components and checked for any syntactical errors. The parser creates a parse tree, a data structure representing the different elements of the query.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Rewriting\"), \": At this stage, the parse tree might be modified to apply any necessary optimization or transformation. Examples include removing redundant conditions, simplifying expressions, expanding views, and applying security-related checks.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Optimization\"), \": This stage involves selecting the best execution plan from multiple alternatives. The query optimizer evaluates various strategies based on factors like the availability of indexes, the size of the tables, and the complexity of the conditions in the query. The cost of each plan is estimated, and the one with the lowest cost is chosen as the final plan.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Plan Execution\"), \": The selected execution plan is converted into a series of low-level operations, which are then executed by the executor. The executor retrieves or modifies the data as specified by the plan, executing the required joins, filtering, aggregations, and sorting steps.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Returning Results\"), \": After the successful execution of the plan, the final result set is sent back to the client application. This result set might be in the form of rows of data, a single value, or a confirmation message of completed operations.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Key Components in Query Processing\"), \"\\n\", React.createElement(_components.p, null, \"There are several key components of PostgreSQL's query processing engine:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Parser\"), \": The component responsible for breaking down SQL queries and creating parse trees.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Optimizer\"), \": The part of the system that evaluates and chooses the optimal execution plan for a given query.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Executor\"), \": The component that runs the selected execution plan, performing the required operations to retrieve or modify the data.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Statistics Collector\"), \": This component gathers essential information about the status of the database, including table sizes, distribution of the data, and access frequency. This information is used by the optimizer to make better decisions when choosing execution plans.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"Row Level Security (RLS)\"), \"\\n\", React.createElement(_components.p, null, \"Row Level Security (RLS) is a feature introduced in PostgreSQL 9.5 that allows us to control access to rows in a table based on a user or role's permissions. This level of granularity in data access provides an extra layer of security for protecting sensitive information from unauthorized access.\"), \"\\n\", React.createElement(_components.p, null, \"To enable RLS, we need to set up policies for our table. A policy is a set of rules that define how users can read or modify table rows. First, enable RLS on the table using the \", React.createElement(_components.code, null, \"ALTER TABLE\"), \" command with the \", React.createElement(_components.code, null, \"FORCE ROW LEVEL SECURITY\"), \" option:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"ALTER TABLE my_table FORCE ROW LEVEL SECURITY;\\n\")), \"\\n\", React.createElement(_components.p, null, \"To create a policy, use the \", React.createElement(_components.code, null, \"CREATE POLICY\"), \" command with a \", React.createElement(_components.code, null, \"USING\"), \" clause that specifies the conditions for allowing access to a row. Here's an example of a policy that allows users to read rows only if the user's \", React.createElement(_components.code, null, \"id\"), \" is equal to the \", React.createElement(_components.code, null, \"user_id\"), \" column in the table:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"CREATE POLICY my_policy ON my_table\\nFOR SELECT\\nUSING (current_user_id() = user_id);\\n\")), \"\\n\", React.createElement(_components.p, null, \"We can also create policies for modifying rows by specifying the \", React.createElement(_components.code, null, \"FOR\"), \" action as \", React.createElement(_components.code, null, \"INSERT\"), \", \", React.createElement(_components.code, null, \"UPDATE\"), \", or \", React.createElement(_components.code, null, \"DELETE\"), \".\"), \"\\n\", React.createElement(_components.h3, null, \"Data Partitioning and Sharding\"), \"\\n\", React.createElement(_components.p, null, \"Data partitioning is a technique that divides a large table into smaller, more manageable pieces called partitions. Each partition is a smaller table that stores a subset of the data, usually based on specific criteria such as ranges, lists, or hashes. PostgreSQL supports different partitioning methods, such as:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Range Partitioning:\"), \" The data in a range-partitioned table is separated into partitions based on a specified range of values for a given column. For example, orders could be partitioned by date range, with each partition containing orders within a specific date interval.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"List Partitioning:\"), \" The data in a list-partitioned table is separated into partitions based on specified discrete sets of values for a given column. For example, customers could be partitioned by their country, with each partition storing customers from a specific country.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Hash Partitioning:\"), \" The data in a hash-partitioned table is divided into partitions using a hash function applied to one or more columns. This method distributes data uniformly across all partitions, which helps in load balancing and parallel query processing. For example, products could be hash partitioned based on the product ID.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Sharding is a technique that splits a large dataset across multiple database instances or servers, called shards. Each shard is an independent and self-contained unit that holds a portion of the overall data, and shards can be distributed across different geographical locations or infrastructures. A horizontal fragment or shard of a relation is a subset of the tuples in that relation. The tuples that belong to the horizontal fragment can be specified by a condition on one or more attributes of the relation, or by some other mechanism. Often, only a single attribute in involved in the condition.\"), \"\\n\", React.createElement(_components.p, null, \"In PostgreSQL environment, sharding can be achieved in different ways:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Sharding at the application level:\"), \" The application defines the logic to decide which shard will store a specific data record. The application communicates directly with each shard for querying or modifying the data.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Sharding using foreign data wrappers:\"), \" PostgreSQL provides a feature called foreign data wrappers (FDW) that allows a PostgreSQL server to access data stored in remote servers, treating them as local tables. By using this technique, the data can be sharded across multiple remote servers, and the local PostgreSQL instance acts as a coordinator for accessing these shards.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Sharding using 3rd-party tools:\"), \" Several 3rd-party tools, such as Pgpool-II, Citus, and PLProxy, can be used for sharding purpose. These tools handle connection pooling, load balancing, and data distribution across multiple PostgreSQL instances. The choice of tools depends on the requirements, complexity, and the desired level of control over the sharding logic.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"CAP Theorem\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Consistency\"), \" means that the nodes will have the same copies of a replicated data item visible for various transactions. \", React.createElement(_components.strong, null, \"Availability\"), \" means that each read or write request for a data item will either by processed successfully or will receive a message that the operation cannot be completed. \", React.createElement(_components.strong, null, \"Partition Tolerance\"), \" means that the system can continue operating if the network connecting the nodes has a fault that results in two or more partitions, where the nodes in each partition can only communicate among each other. The \", React.createElement(_components.strong, null, \"CAP Theorem\"), \" states that it is not possible to guarantee all three of the desirable properties - consistency, availability, and partition tolerance - at the same time in a distributed system with data replication. If this is the case, then the distributed system designer would have to choose two properties out of the three to guarantee.\"), \"\\n\", React.createElement(_components.h3, null, \"Algorithms for SELECT Operation\"), \"\\n\", React.createElement(_components.p, null, \"A number of search algorithms are possible for selecting records from a file, which are known as \", React.createElement(_components.strong, null, \"file scans\"), \", because they scan the records of a file to search for and retrieve records that satisfy a selection condition. If the search algorithms involves the use of an index, the index search is called an \", React.createElement(_components.strong, null, \"index scan\"), \". Different search algorithms:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"S1 - Linear search (brute force algorithm)\"), \"\\n\", React.createElement(_components.li, null, \"S2 - Binary search (requires sorted data)\"), \"\\n\", React.createElement(_components.li, null, \"S3a - Using a primary index, S3b - Using a hash key\"), \"\\n\", React.createElement(_components.li, null, \"S4 - Using a primary index to retrieve multiple records\"), \"\\n\", React.createElement(_components.li, null, \"S5 - Using a clustering index to retrieve multiple records\"), \"\\n\", React.createElement(_components.li, null, \"S6 - Using a secondary (B+ tree) index on an equality comparison\"), \"\\n\", React.createElement(_components.li, null, \"S7a - Using a bitmap index, S7b - Using a functional index\"), \"\\n\", React.createElement(_components.li, null, \"S8 - Conjunctive selection using an individual index\"), \"\\n\", React.createElement(_components.li, null, \"S9 - Conjunctive selection using a composite index\"), \"\\n\", React.createElement(_components.li, null, \"S10 - Conjunctive selection by intersection of record pointers\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Credits & Attributions:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.postgresql.org/docs/\"\n  }, \"Official Postgres Documentation\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://hasura.io/learn/database/postgresql/core-concepts/\"\n  }, \"Core Postgres Concepts\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.postgresqltutorial.com/\"\n  }, \"PostgreSQL Tutorial\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/ruminations/ruminations/content/posts/database-concepts/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Object","assign","_objectDestructuringEmpty","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","_createMdxContent","_components","h2","p","ol","li","strong","h3","pre","code","ul","h4","_provideComponents","components","className","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}