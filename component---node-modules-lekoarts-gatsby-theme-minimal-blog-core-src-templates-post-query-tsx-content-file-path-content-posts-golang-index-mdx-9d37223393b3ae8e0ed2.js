"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[682],{1173:function(e,t,n){n.d(t,{p:function(){return h},A:function(){return p}});var a=n(454),l=n(6540),r=n(557),i=n(6835),o=n(3328),s=n(7715),c=n(7169);var u=e=>{let{post:t}=e;return null};const d=["16px","8px","4px"].map(e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px");var m=e=>{let{data:{post:t},children:n}=e;return(0,r.Y)(o.A,null,(0,r.Y)(i.DZ,{as:"h1",variant:"styles.h1"},t.title),(0,r.Y)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,r.Y)("time",null,t.date),t.tags&&(0,r.Y)(l.Fragment,null," — ",(0,r.Y)(s.A,{tags:t.tags})),t.timeToRead&&" — ",t.timeToRead&&(0,r.Y)("span",null,t.timeToRead," min read")),(0,r.Y)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:d.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},n),(0,r.Y)(u,{post:t}))};const h=e=>{var t,n,a;let{data:{post:l}}=e;return(0,r.Y)(c.A,{title:l.title,description:l.description?l.description:l.excerpt,image:l.banner?null===(t=l.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(a=n.resize)||void 0===a?void 0:a.src:void 0,pathname:l.slug,canonicalUrl:l.canonicalUrl})};function p(e){let t=Object.assign({},((0,a.A)(e),e));return l.createElement(m,t)}},5359:function(e,t,n){n.r(t),n.d(t,{Head:function(){return o.p},default:function(){return s}});var a=n(6540),l=n(8453);function r(e){const t=Object.assign({h2:"h2",p:"p",h3:"h3",code:"code",ul:"ul",li:"li",blockquote:"blockquote",ol:"ol",pre:"pre",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",a:"a"},(0,l.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h2,null,"Introduction"),"\n",a.createElement(t.p,null,"Go is expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It's a fast, statically typed, compiled language. Go is not an object oriented programming language."),"\n",a.createElement(t.h3,null,"Basic Commands"),"\n",a.createElement(t.p,null,"Running ",a.createElement(t.code,null,"go")," in terminal provides a list of options. This command is a tool to interact with Go language, which is mainly used to build, compile, test and do other things with Go projects."),"\n",a.createElement(t.p,null,"To run code, use ",a.createElement(t.code,null,"go run filename.go"),". Some Go CLI commands:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,"go build")," - Compiles a bunch of Go source code files"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"go run")," - Compiles and executes one or two files"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"go fmt")," - Formats all the code in each file in the current directory"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"go install"),' - Compiles and "installs" a package'),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"go get")," - Downloads the raw source code of someone else's package"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"go test")," - Runs any tests associated with the current project"),"\n"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.h3,null,"Reading command-line arguments"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"os.Args")," is a slice of type string that represents the actual command-line arguments that are provided to the program. The first element in this slice is the temporary file that is created when the program is compiled."),"\n"),"\n",a.createElement(t.h2,null,"Packages"),"\n",a.createElement(t.p,null,"In Go, a package, project and a workspace mean the same. A package is a collection of common source code files. Only requirement for every file inside a package: it should declare the package name it belongs to at the very first line."),"\n",a.createElement(t.p,null,"There are 2 types of packages:"),"\n",a.createElement(t.ol,null,"\n",a.createElement(t.li,null,"Executable packages - which generate executable files on compilation that we can run"),"\n",a.createElement(t.li,null,'Reusable packages - code used as "helpers". Good place to put reusable logic'),"\n"),"\n",a.createElement(t.p,null,'Package naming convention determines the type of package. Specifically, the name "main" is used to create an executable type package. Running ',a.createElement(t.code,null,"go build"),' for any package which is not named "main" would not produce executable package. In the Go source code files, ',a.createElement(t.code,null,"package main"),' defines a package that can be compiled and then executed. It must have a function called "main" defined within the files. ',a.createElement(t.code,null,"package somename")," defines a package that can be used as a dependency."),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"import")," statements are used to access codes in other packages. ",a.createElement(t.code,null,"fmt")," is a standard library package which is used to print information to the terminal. Package ",a.createElement(t.code,null,"fmt")," implements formatted I/O with functions analogous to C's printf and scanf. To import multiple packages, use this syntax: ",a.createElement(t.code,null,'import ( "pkg1" "pkg2" ..... )'),"."),"\n",a.createElement(t.h2,null,"Variables and Pointers"),"\n",a.createElement(t.p,null,"Go variables are always assigned types, which do not change. Different data types in Go are: bool, string, int, float64. Alternative way of declaring variables, where type is initialized - example: ",a.createElement(t.code,null,'somevar := "hello"'),". ",a.createElement(t.code,null,":=")," is only used for variable initialization. = is used for variable reassignment of values. Declaring string variables example: ",a.createElement(t.code,null,'var card string = "hello"'),"."),"\n",a.createElement(t.p,null,'When we create a variable in Go and do not assign any value to it, Go assigns what is referred to as a zero value (in case of a struct, zero values to each struct field). It varies for each type. It is "" for ',a.createElement(t.code,null,"string"),", 0 for ",a.createElement(t.code,null,"int")," and ",a.createElement(t.code,null,"float"),", and false for ",a.createElement(t.code,null,"bool"),". Type conversion is done in Go by specifying the type to which the value needs to be converted, and the value in parentheses."),"\n",a.createElement(t.h2,null,"Slices and Arrays"),"\n",a.createElement(t.p,null,"Go has 2 basic data structures for handling lists of elements:"),"\n",a.createElement(t.ol,null,"\n",a.createElement(t.li,null,"array - fixed length list of elements"),"\n",a.createElement(t.li,null,"slice - an array that can grow or shrink"),"\n"),"\n",a.createElement(t.p,null,"Both slices and arrays must be declared with a data type, and all elements within them can only have that data type."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Slice example: ",a.createElement(t.code,null,'somelist := []string{"hello", "there", "what"}'),"."),"\n",a.createElement(t.li,null,"Adding new element to a slice: ",a.createElement(t.code,null,'cards = append(cards, "oooh")'),". It does not modify the existing slice; it creates a new slice and returns it."),"\n",a.createElement(t.li,null,"Iterate over elements of a slice:","\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-go"},"for i,card := range cards {\n  fmt.Println(i, card)\n}\n")),"\n","The initialization syntax in for loop: ",a.createElement(t.code,null,"for i, card := range cards {}")," is used because these variables keep changing fof every iteration. Hence they are freshly initialized."),"\n",a.createElement(t.li,null,"To get a subset of elements from a slice, this syntax is used: ",a.createElement(t.code,null,"arr[i,j]")," - where i denotes starting index, and j denotes ending index. All elements from i to j-1 are retrieved."),"\n",a.createElement(t.li,null,"In a for loop, we do not need to always get a reference to the element that we are iterating over in some cases. ",a.createElement(t.code,null,"len()")," is used to get the length of a slice. Example: len(arr) gets the length of slice named arr."),"\n"),"\n",a.createElement(t.h2,null,"Functions and Receivers"),"\n",a.createElement(t.p,null,"Functions are declared using ",a.createElement(t.code,null,"func")," keyword, name of the function and argument list, followed by function body. We can extend a base type in Go and add some functionality to it. Example: ",a.createElement(t.code,null,"type deck []string"),". The custom type that we declare by extending the base types gives us the ability to create custom functions that only work with that type."),"\n",a.createElement(t.p,null,'A function with a "receiver" is like a method - a function that belongs to an instance. Receiver on a function example:'),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-go"},"type deck []string\n\nfunc (d deck) print() {\n    for i,card := range d {\n        fmt.Println(i, card)\n    }\n}\n")),"\n",a.createElement(t.p,null,"In this syntax, any variable of type ",a.createElement(t.code,null,"deck")," gets access to the print method. The receiver sets up methods on variables that we create. By convention, we usually refer to the receiver with a 1/2 letter abbreviation that matches the type of receiver. To return a value from a function, we must annotate the function with the type of value that is returned, and this is specified after function parantheses. If we have some variable declared that we don't actually have to use, then we can replace it with '_' which tells Go that it is an unused variable."),"\n",a.createElement(t.p,null,"It is possible to return multiple values from a function. Example: ",a.createElement(t.code,null,"func deal (d deck, handSize int) (deck, deck) { }"),". While returning multiple values from a function, Go expects their types to be annotated in function declaration."),"\n",a.createElement(t.h3,null,"Struct"),"\n",a.createElement(t.p,null,"It is a data structure in Go which represents collection of different properties that are related together and have a common purpose. To define a struct, declare all the properties that it can contain, and then create a new value of that struct type. Example:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-go"},'type person struct {\n    firstName string\n    lastName string\n}\n\n// initializing variables and updating them (multiple ways)\njohn := person{"John","Wick"}\nethan := person{firstName: "Ethan", lastName: "Hunt"}\nvar bruce person // declares a value of type person and assigns it to the variable\nbruce.firstName = "Bruce"\n')),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,a.createElement(t.code,null,'fmt.Printf("%+v", structvar)')," prints out all different field names and their values from structvar."),"\n"),"\n",a.createElement(t.p,null,"It is possible to embed a struct within another struct. Example:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-go"},'type contactInfo struct {\n    email string\n    zipCode int\n}\n\ntype person struct {\n    name string\n    contact contactInfo // it is also possible to have field name same as type name - example: by just declaring this as:\n    // contactInfo\n}\n\njim := person{\n    name: "Jim Halpert",\n    contact: contactInfo{\n        email: "jim@abc.com",\n        zipCode: 12345,\n    },\n}\n\njimPointer := &jim // assigns the memory address of the value this variable is pointing at\njimPointer.updateName("Jimmy")\n// alternative: jim.updateName("Jimmy") since Go allows both variables and their pointers to invoke receivers\n\nfunc (p person) print() {} // it is possible to define functions that have receivers with structs as well\n// but updates on struct do not have any effect in this case, so pointers are used\n\nfunc (pt *person) updateName(newName string){\n    (*pt).name = newName // *pt - represents the actual value that this memory address is pointing at, and *person represents the pointer type\n}\n')),"\n",a.createElement(t.h3,null,"Pass by value and pass by reference"),"\n",a.createElement(t.p,null,"Go is a pass-by-value language, which means Go takes values passed into functions, copy those values and place them in new variables within function scopes. However, this case is different for slices. Go internally creates 2 data structures when a slice is created: 1 - a structure with a pointer to head, capacity and length fields, and 2 - an array. When we pass in a slice to a function, Go re-creates the first data structure, which would still point towards the existing array (2nd data structure). This would allow functions to modify slices without the use of pointers. Slice is considered as a ",a.createElement(t.strong,null,"reference type")," as it is a reference to another data structure in memory."),"\n",a.createElement(t.p,null,"Value Types - int, float, string, bool, structs. We should use pointers to modify these things inside functions\nReference Types - slices, maps, channels, pointers, functions. No need to use pointers to modify these."),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"Easy way to remember pointers:"),"\n",a.createElement(t.ol,null,"\n",a.createElement(t.li,null,"Turn ",a.createElement(t.strong,null,"address")," into ",a.createElement(t.strong,null,"value")," with ",a.createElement(t.code,null,"*address")),"\n",a.createElement(t.li,null,"Turn ",a.createElement(t.strong,null,"value")," into ",a.createElement(t.strong,null,"address")," with ",a.createElement(t.code,null,"&value")),"\n"),"\n"),"\n",a.createElement(t.p,null,"If we define a receiver function with a type of pointer to any object, Go will allow us to call this function with either the object or the pointer (both are allowed). In receiver functions, if we do not use the variables (based on which they're defined), then they can just mention the type instead of mentioning both variable name and type. Example: ",a.createElement(t.code,null,"func (deck) something() string {}"),"."),"\n",a.createElement(t.p,null,"Functions can also be passed as arguments to other functions. Go doesn't support function overloading (functions with same names) even if arguments and other parts are different."),"\n",a.createElement(t.h3,null,"Maps"),"\n",a.createElement(t.p,null,"A map is a collection of key-value pairs. All the keys and values are of the same type, but the key-value pair need not be of same type. Unlike structs, Dot syntax is not allowed in maps to add/modify key-value pairs, because all keys inside a map are typed. Example:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-go"},'// different types of declaring maps:\n\n// all keys are of type string, and all values are of type string\ncolors := map[string]string {\n    "red": "#FF0000",\n    "blue": "#0000FF",\n}\ncolors["white"] = "#FFFFFF"\n\ndelete(colors, "blue") // deletes the specified key from the map\n\nvar places map[string]int // initialized with zero value - here it is basically an empty map\n\n// make() - built-in function that takes a type of a slice and the number of elements the slice should have (zero values - initialized)\ncountries := make(map[string]bool) // also initialized with zero value\n\nfunc printThisMap(c map[string]string){\n    for key, value := range c { // extracting each key-value pair\n        fmt.Println(color, hex)\n    }\n}\nprintThisMap(colors)\n')),"\n",a.createElement(t.h3,null,"Differences between Maps and Structs"),"\n",a.createElement(t.table,null,a.createElement(t.thead,null,a.createElement(t.tr,null,a.createElement(t.th,{align:"center"},"Map"),a.createElement(t.th,{align:"center"},"Struct"))),a.createElement(t.tbody,null,a.createElement(t.tr,null,a.createElement(t.td,{align:"center"},"All keys must be of same type. All values must be of same type"),a.createElement(t.td,{align:"center"},"Values can be of different type")),a.createElement(t.tr,null,a.createElement(t.td,{align:"center"},"Used to represent a collection of related properties"),a.createElement(t.td,{align:"center"},'Used to represent a "thing" with a lot of different properties')),a.createElement(t.tr,null,a.createElement(t.td,{align:"center"},"Keys are indexed - we can iterate over them"),a.createElement(t.td,{align:"center"},"Keys don't support indexing")),a.createElement(t.tr,null,a.createElement(t.td,{align:"center"},"We don't need to know all the keys at compile time; key-value pairs can be defined later"),a.createElement(t.td,{align:"center"},"We need to know (and explicitly define) all the different fields at compile time")),a.createElement(t.tr,null,a.createElement(t.td,{align:"center"},"It is a reference type"),a.createElement(t.td,{align:"center"},"It is a value type")))),"\n",a.createElement(t.h2,null,"Interfaces"),"\n",a.createElement(t.p,null,"Interfaces make it easier to reuse code between different parts of the code base. We use interfaces to define a method / function set which can be used for any values having the type of the interface. We can consider 2 types in this aspect: concrete type, which is something we can actually create a value out of directly and then access / modify it (example: map, struct, int), and interface type, using which we cannot create a value out of it directly. Interfaces are not generic types. Interfaces are ",a.createElement(t.strong,null,"implicit"),", which means we don't have to specify that our custom type satisfies some interface. They are a contract to help us manage types. They help us to reuse code and form a relation between different functions. Interfaces can be used as types inside structs, which indicates that the variable can have any value as long as it satisfies the interface definition. Interfaces can be combined in another interface by just specifying their names."),"\n",a.createElement(t.p,null,"Example:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-go"},'type bot interface {\n    getGreeting() string\n    // other function names, list of argument types and list of return types\n    // example: doSomething(string, int) (string, bool) {}\n}\n\n// if there is any type in this program that has a function called getGreeting which returns a string, then it satisfies the above interface, and therefore, the variables of that type also become the variables of the interface\'s type, and hence invoke any function based on interface\'s type\n\ntype englishBot struct{}\ntype spanishBot struct{}\n\nfunc main() {\n    eb := englishBot{}\n    sb := spanishBot{}\n\n    printGreeting(eb)\n    printGreeting(sb)\n}\n\nfunc printGreeting(b bot){\n    fmt.Println(b.getGreeting())\n}\n\nfunc (englishBot) getGreeting() string {\n    return "Hello there!"\n}\n\nfunc (spanishBot) getGreeting() string {\n    return "Hola!"\n}\n')),"\n",a.createElement(t.p,null,"Reader interface is a common one used in standard library which puts an abstraction around different sources of input coming into the application and provides a common output data that can be used by anyone. It has a ",a.createElement(t.code,null,"Read()")," function where the application passes in a byte slice, and the function modifies it to add the input consumed by different sources. This function does not automatically resize the byte slice if it is full."),"\n",a.createElement(t.p,null,"Writer interface is another common one used in standard library which take information within our program (provided in byte slice) and send that data to some channel of output. ",a.createElement(t.code,null,"io.Copy()")," is used to copy data from a source, that implements Reader interface, to a destination that implements Writer interface."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-go"},"type Reader interface {\n    Read(p []byte) (n int, err error)\n}\n\ntype Writer interface {\n    Write(p []byte) (n int, err error)\n}\n\nfunc Copy(dst Writer, src Reader) (written int64, err error)\n")),"\n",a.createElement(t.h3,null,"Strings, Errors and Randomization"),"\n",a.createElement(t.p,null,"A byte slice is an array where every element corresponds to an ASCII character code. ",a.createElement(t.code,null,"join()")," function for strings (under strings standard library) joins an array of strings into a single string. ",a.createElement(t.code,null,"ioutil.WriteFile()")," writes the contents of a byte slice to a file. But the file would display the string version of it, when viewed normally. ",a.createElement(t.code,null,"Spilt()")," function under strings package splits a string given a separator, into a slice of strings."),"\n",a.createElement(t.p,null,'Errors are usually values of type "error". If nothing went wrong during processing, they will have a value of "nil" (which means no value in Go). If something went wrong, these error variables will be populated. ',a.createElement(t.code,null,"Exit()")," function under the os package can be used to terminate program in any operating system. An exit code of 0 indicates successful run, and anything besides that indicates error."),"\n",a.createElement(t.p,null,"Go standard library does not have any built-in function to shuffle slices or arrays. The ",a.createElement(t.code,null,"Intn()")," function generates a random number between 0 and the number we pass into the function. It is part of ",a.createElement(t.code,null,"math/rand")," standard package. ",a.createElement(t.code,null,"rand.Intn()")," is a pseudo random number generator. Go by default, uses a random number generator that depends upon some seed value. Go random number generator always uses the exact same seed. Type ",a.createElement(t.code,null,"Rand")," is a source of random numbers. Rand is essentially an object that will also generate random numbers for us. This also means that values of type Rand can be used to specify seed / source of randomness."),"\n",a.createElement(t.p,null,"To create a value of type ",a.createElement(t.code,null,"Rand"),", use the ",a.createElement(t.code,null,"New()")," function, which accepts a source (which is the same as the seed), which can be used to generate random numbers. Current time in int64 format can be used as a seed for random number generator."),"\n",a.createElement(t.h3,null,"Testing"),"\n",a.createElement(t.p,null,"Go testing isn't like RSpec, mocha, jasmine, selenium etc. We get a very small interface or a very small set of functions to test the code. To test code, create files that end with this format: ",a.createElement(t.code,null,"_test.go")," and run all tests in a package by using ",a.createElement(t.code,null,"go test")," command. All files that are present inside a directory must specify the package they belong to, including test files."),"\n",a.createElement(t.p,null,"Go testing handler calls all functions defined in test files with this argument: ",a.createElement(t.code,null,"t \\*testing.T"),". Here, t is the test handler which can be used to inform if tests go wrong. ",a.createElement(t.code,null,"t.Errorf()")," is used to generate an error message and indicate that the test was unsuccessful. ",a.createElement(t.code,null,"Errorf"),' is a formatted string function where we can use "%v" in strings and then pass in variable values as subsequent arguments to substitute them in correct places. Unlike other testing frameworks, which specify the number of tests passed / failed, Go doesn\'t register any tests. It just tells if overall test is successful or not. Any resources created during testing should be manually cleaned up because there is no such feature in Go testing framework.'),"\n",a.createElement(t.h2,null,"Channels and Go Routines"),"\n",a.createElement(t.p,null,"Channels and Go Routines are both structures inside Go that are used for handling concurrent programming."),"\n",a.createElement(t.p,null,"When a Go program is compiled and executed, one Go routine is automatically created (main routine). It exists within the running process, executing every line of code. If there is a blocking call within the program (like a HTTP request), the Go routine cannot do anything else but wait for it to complete. ",a.createElement(t.code,null,"go")," keyword is used to execute functions in new Go routines (called child routines). Syntax: ",a.createElement(t.code,null,"go funcName(args)")," - this creates a new Go routine which executes the specified function."),"\n",a.createElement(t.p,null,"Go Scheduler works with only one CPU core in local machine (this is configurable). When we launch multiple Go routines, only one is being executed / running at any given time. The purpose of Go Scheduler is to monitor the execution of these Go routines. It runs one routine until it finishes or makes a blocking call, at which it runs another. If there are multiple CPU cores available, Go Scheduler assigns each routine to any available CPU core, thus running multiple routines at the same time."),"\n",a.createElement(t.p,null,"Concurrency - we can have multiple threads executing code. If one thread blocks, another one is picked up and worked on.\nParallelism - multiple threads executed at the same time. Requires multiple CPUs."),"\n",a.createElement(t.p,null,"When we create multiple Go routines, the main routine ends execution if there isn't anything else to do after spawning child routines (even if they haven't finished execution yet). Channels are used to communicate between different running Go routines. Here, a channel is used to make sure that the main routine is aware of when each of these child routines have completed their execution. Data passed into channels are typed, just like any other variables. For example, a channel of type string can only send string variables to Go routines. Channels have to be passed into the functions which are launched as Go routines."),"\n",a.createElement(t.p,null,"Data is passed into the channel by the child routine whose blocking call is resolved first. If there are more listeners in the main routine compared to number of child routines invoked, then the main routine hangs indefinitely, waiting for data to show up in channel."),"\n",a.createElement(t.p,null,"Syntax for sending data with channels:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,"someChan <- someVal")," - send the value ",a.createElement(t.code,null,"someVal")," into this channel named ",a.createElement(t.code,null,"someChan")),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"myNumber <- someChan")," - wait for a value to be sent into the channel named ",a.createElement(t.code,null,"someChan"),". When we get a value, assign it to the variable ",a.createElement(t.code,null,"myNumber")),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"fmt.Println(<-someChan)")," - wait for a value to be sent into the channel named ",a.createElement(t.code,null,"someChan"),". When we get a value, print it out immediately"),"\n"),"\n",a.createElement(t.p,null,"In Go, a function literal is an unnamed funciton that can be used to wrap some chunk of code that can be executed at some point in the future."),"\n",a.createElement(t.p,null,"We should not reference variables that are being maintained or used by other goroutines. No variable should be referenced in multiple goroutines. Instead, variable values should be passed to goroutines as function arguments."),"\n",a.createElement(t.h2,null,"Credits & Attributions:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://go.dev/doc/"},"Official Go Documentation")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://go.dev/play/"},"Go Playground")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://pkg.go.dev/std"},"Go Standard Library Packages")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://gobyexample.com/"},"Go By Example Tutorials")),"\n"))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.RP)(),e.components);return t?a.createElement(t,e,a.createElement(r,e)):r(e)},o=n(1173);function s(e){return a.createElement(o.A,e,a.createElement(i,e))}o.A},7715:function(e,t,n){var a=n(557),l=n(6540),r=n(4794),i=n(3601),o=n(2174);t.A=e=>{let{tags:t}=e;const{tagsPath:n,basePath:s}=(0,i.A)();return(0,a.Y)(l.Fragment,null,t.map((e,t)=>(0,a.Y)(l.Fragment,{key:e.slug},!!t&&", ",(0,a.Y)(r.Link,{sx:e=>{var t;return Object.assign({},null===(t=e.styles)||void 0===t?void 0:t.a)},to:(0,o.A)("/"+s+"/"+n+"/"+e.slug)},e.name))))}}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-golang-index-mdx-9d37223393b3ae8e0ed2.js.map