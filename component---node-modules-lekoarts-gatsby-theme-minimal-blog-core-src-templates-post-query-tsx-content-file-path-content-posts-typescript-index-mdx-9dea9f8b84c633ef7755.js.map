{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-typescript-index-mdx-9dea9f8b84c633ef7755.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./content/posts/typescript/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ol: \"ol\",\n    strong: \"strong\",\n    br: \"br\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Basic features\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"TypeScript = JavaScript + A type system (which helps us catch errors during development, uses 'type annotations' to analyze our code, being only active during development, and which doesn't provide any performance optimization)\"), \"\\n\", React.createElement(_components.li, null, \"Alternative to JavaScript(superset - extends JavaScript with new features and syntax)\"), \"\\n\", React.createElement(_components.li, null, \"Allows us to use strict types (JavaScript uses dynamic types)\"), \"\\n\", React.createElement(_components.li, null, \"Supports modern features (arrow functions, let, const - similar to Babel compiler)\"), \"\\n\", React.createElement(_components.li, null, \"Extra features (generics, interfaces, tuples etc)\"), \"\\n\", React.createElement(_components.li, null, \"Browsers do not understand TypeScript, hence needs to be compiled into JavaScript\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Installing\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"npm install -g typescript ts-node\\ntsc inputfile.ts outputfile.js\\n\")), \"\\n\", React.createElement(_components.p, null, \"tsc is the TypeScript compiler which converts TypeScript files into JavaScript. \", React.createElement(_components.code, null, \"outputfile.js\"), \" parameter isn't required if both TypeScript and JavaScript filenames are same. If JavaScript file doesn't exist, it will create a new one.\\ntsc can watch over a file and compile it to JavaScript whenever any changes are made and saved. For that, just add \", React.createElement(_components.code, null, \"-w\"), \" parameter for tsc command. It also tells if any errors are present. \", React.createElement(_components.code, null, \"ts-node inputfile.ts\"), \" runs both \", React.createElement(_components.code, null, \"tsc inputfile.ts\"), \" and \", React.createElement(_components.code, null, \"node inputfile.js\"), \" commands at once.\"), \"\\n\", React.createElement(_components.h2, null, \"Basic Types\"), \"\\n\", React.createElement(_components.p, null, \"A type is an easy way to refer to the different properties along with the functions that a value has. In TypeScript, there is no Integer or Float type. They come under a single Number type. However, there are 2 categories of types: Primitive types (number, boolean, void, undefined, string, symbol, null), and Object types (functions, arrays, classes and objects). It will not allow variables to change types, but values can be changed. Types are used by the TypeScript Compiler to analyze our code for errors. It infers the type of the variable declared, based on the value assigned to the variable. It also has access to JavaScript objects like Math and Date. We can define the type of variable passed into functions as an argument. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"const double = (something: number) => {\\n    return something * 2;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Arrays maintain a strict type check. If an array with different types is required, it should be declared first. Variable holding the array cannot be changed for a different type, like string. Object properties maintain a strict type check as well. We cannot add/define new properties for an object once it is defined. Once an object is declared, it cannot be redefined by adding/removing properties or redefining existing property types; it should have the exact same structure as declared.\"), \"\\n\", React.createElement(_components.p, null, \"Type annotations are the code we add to tell TypeScript what type of value a variable will refer to (or what type of arguments a function will receive and what type of values it will return). Type inference means TypeScript tries to figure out what type of value a variable refers to. If variable declaration and initialization are on the same line, TypeScript perform type inference for the variable. 'any' type indicates TypeScript has no idea what the variable's value holds, therefore cannot check for correct property references. Variables with 'any' type should be always avoided. Type inference for functions only works for the return values, not the arguments received by the function. 'never' type indicates the function will not reach end of its execution because of an error.\"), \"\\n\", React.createElement(_components.p, null, \"We can declare explicit types for variables without defining values for them, like: \", React.createElement(_components.code, null, \"let name: string;\"), \". This will restrict the variable to have only values of that specific type. Examples:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"let names: string[] // array of strings, but it is not initialize with empty array. It is just restricting the type of value it could have in future\\n\\nlet ages: number[] = []; // declared explicit types with empty initialized array\\n\\nlet mixed: (string|number)[] = []; // array of strings and numbers\\n\\nlet mixedVar: string|boolean // variable which can have string or boolean\\n\\nlet trait: object; // object type\\ntrait = [];  // allowed, because array is a kind of object\\n\\nlet being: {   // specifically declaring object and properties types\\n    name: string,\\n    age: number\\n}\\n\\nlet greet: Function; // declaring function type without defining function body\\n\")), \"\\n\", React.createElement(_components.p, null, \"A union type allows one or more type of values for a variable / array. If a union type of 2 or more objects is set for a variable, TypeScript limits the number of allowed properties to the common properties and methods that exist between the objects. \", React.createElement(_components.code, null, \"any\"), \" type allows a variable to have any type of value, but it is not recommended for frequent usage as no errors are generated for wrong/missing values. A type guard is a check on the type of a variable; \", React.createElement(_components.code, null, \"instanceof\"), \" operator is one such type guard, which restores access to all the different properties associated with a specific type assigned to the variable, usually used for narrowing down complex types, and \", React.createElement(_components.code, null, \"typeof\"), \" operator is another type guard which can give very basic information about the type of values we have at runtime, usually used for narrowing down primitive types.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"let something: any = 45;\\nlet mixedSomething: any[] = [];\\n\")), \"\\n\", React.createElement(_components.h2, null, \"TS file config\"), \"\\n\", React.createElement(_components.p, null, \"To initialize a .tsconfig file, use \", React.createElement(_components.code, null, \"tsc --init\"), \". This file contains all TypeScript compiling configuration options:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"target\"), \" defines output JS specification (can be ES5, ES6 etc).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"module\"), \" allows us to use ES6 modules by specifying \", React.createElement(_components.code, null, \"es2015\"), \" for it, and \", React.createElement(_components.code, null, \"es6\"), \" for target.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"rootDir\"), \" defines source file directory and \", React.createElement(_components.strong, null, \"outDir\"), \" defines output file directory. Example values are \", React.createElement(_components.code, null, \"./src\"), \" and \", React.createElement(_components.code, null, \"./public\"), \" respectively.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"include\"), \" (declared outside all definitions) defines that it should only compile files present inside specified directory, not outside of it. Ex: \", React.createElement(_components.code, null, \"\\\"include\\\" : [ \\\"src\\\" ]\"), \".\", React.createElement(_components.br), \"\\n\", \"After saving .tsconfig file, just invoke tsc / tsc -w to compile files.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Functions\"), \"\\n\", React.createElement(_components.p, null, \"It is possible to add optional parameters to a function by placing question mark (?) with the variable. If it is not passed, but still used inside function, its value will be undefined. Always put required params at beginning, and optional params at the end. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"const add = (var1: number = 20, var2: number | string, var3?: number | string) => {\\n    console.log(\\\"adding...\\\"); // here var2 is union type, and var3 is optional\\n    console.log(var1); // here var1 has default value 20 if nothing is passed to it, hence it is also optional\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"TypeScript will infer the return type of a function based on the value returned, and automatically sets it to invoking variable. It can also be set explicitly like this:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"const subtract = (var1: number, var2: number): string => {\\n    return 'hello there'; \\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Function will return void if nothing is returned, which is compiled to \", React.createElement(_components.code, null, \"undefined\"), \" in JavaScript. Void is complete lack of any value, and it is different compared to undefined in JavaScript.\"), \"\\n\", React.createElement(_components.p, null, \"Function signatures are used to specify what type of function a variable can hold. They describe the general structure of a function by declaring types of arguments used, and type of value returned. Basic example is \", React.createElement(_components.code, null, \"() => void;\"), \" which specifies that function takes no arguments, and returns void. Function signature for above function would be something like this:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"let subtractStructure : (somevar1: number, somevar2: number) => string;\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Type Aliases and DOM\"), \"\\n\", React.createElement(_components.p, null, \"Type Aliases can be used to define types that are reused multiple times throughout the code. They can also be used to set object types. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"type stringOrNum = string | number;\\ntype objWithSomething = { name: string, uid: stringOrNum };\\n\\nlet var1: stringOrNum;\\nlet someObj: objWithSomething;\\n\")), \"\\n\", React.createElement(_components.p, null, \"TypeScript allows us to use the same DOM JavaScript query methods, element properties and event listeners, with some exceptions. If we try to access a DOM element's property, TypeScript throws an error saying it may be null, because it doesn't have access to the HTML page during development. We can workaround that by adding an exclamation mark (!) in declaration. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"const anchor = document.querySelector(\\\"a\\\")!; // explicitly declaring that a value definitely exists for this element\\nconsole.log(anchor.href); // here anchor is of type HTMLAnchorElement\\n\")), \"\\n\", React.createElement(_components.p, null, \"TypeScript also has special types for every DOM element. But it will default to Element type if we query HTML elements using id or class. Typecasting can be used to define the type of element that a query method can return, basically casting it to be of certain type. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"const formVar = document.querySelector(\\\".last-form\\\") as HTMLFormElement; // now formVar is considered to be HTMLFormElement type instead of Element type\\n\\nformVar.addEventListener(\\\"submit\\\",(e: Event) => {\\n    e.preventDefault();\\n});\\n\\n// extra: HTMLInputElement.valueAsNumber returns input value as number instead of string (JS default)\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Classes\"), \"\\n\", React.createElement(_components.p, null, \"Classes in TypeScript are similar to those in JavaScript. Class is a blueprint to create an object with some fields (values) and methods (functions) to represent a 'thing'. It is also possible to create an array of class objects, similar to string arrays and object arrays. By default, all properties of a class are public. Private properties are not accessible outside of class. Another access modifier is \", React.createElement(_components.code, null, \"readonly\"), \" which makes a property read-only from both outside and inside of a class, and not allowing to change it anywhere. We can skip declaring variables inside class by using access modifiers directly in parameters of constructor function. Classes have dual-nature in TypeScript: to create new instances of the class, or refer to the type of the class. A class can inherit properties and methods of another class, and also override them by using \", React.createElement(_components.code, null, \"extends\"), \" keyword. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts:title=Invoice.ts\"\n  }, \"export class Invoice {\\n    private clientName: string;\\n    public amount: number; // public is an access modifier. As it is default, no need to explicitly specify it.\\n    \\n    constructor(cName: string, amt: number){\\n        this.clientName = cName;\\n        this.amount = amt;\\n    }\\n    \\n    giveSomething(){\\n        return `${this.clientName} owes ${this.amount} of money`;\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Modifiers are keywords that can be placed on different properties and methods in a class to restrict access to them. \", React.createElement(_components.code, null, \"public, private and protected\"), \" are the different modifiers. Marking a method as \", React.createElement(_components.code, null, \"private\"), \" means it can only be called by other methods in the class. Marking a method as \", React.createElement(_components.code, null, \"protected\"), \" means it can only be called by other methods in the class, or by other methods in the child classes. Modifiers assigned in parent class cannot be changed in child class.\"), \"\\n\", React.createElement(_components.p, null, \"To use ES6 modules, add \", React.createElement(_components.code, null, \"type=\\\"module\\\"\"), \" to \", React.createElement(_components.code, null, \"<script>\"), \" tag. But TypeScript always compiles different .ts files into .js files, requiring multiple requests in web. Webpack can solve this by compiling files into a single file, and also ensuring older browsers support.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts:title=app.ts\"\n  }, \"import { Invoice } from \\\"./Invoices.js\\\"; // .js file because we're importing compiled JS file \\nconst invOne = new Invoice('John',200);\\nlet invoicesArray: Invoice[] = []; // only Invoice objects are allowed for this array \\n\")), \"\\n\", React.createElement(_components.h2, null, \"Interfaces\"), \"\\n\", React.createElement(_components.p, null, \"An interface allows us to enforce a certain structure of a class or an object. It can be used to describe types of properties and return types of methods. An interface creates a new type, describing the property names and value types of an object. It is different from a class as it is not used to generate objects. The interface definition can contain any types, including primitives and function types. Objects which are declared using an interface must follow the structure set by that interface; they cannot have anything else, but they can have additional properties which aren't defined in the interface. Use \", React.createElement(_components.code, null, \"implements\"), \" keyword for implementing an interface inside a class i.e., ensuring the class implements all methods and properties declared by the interface. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"interface IsPerson {\\n    name: string;\\n    age: number;\\n    introduce(someVar: string): void;\\n}\\n\\nconst someguy: IsPerson = {\\n    name: 'John',\\n    age: 30,\\n    introduce(someText: string): void { \\n        console.log(someText); // method body can be different for objects\\n    }\\n};\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Generics\"), \"\\n\", React.createElement(_components.p, null, \"Generics allows us to create reusable blocks of code which can be used with different types. If we pass a normal object to a function (without declaring its properties types), add some properties to it and return it, TypeScript cannot infer what properties are present in that object. By making an object type to be generic, TypeScript automatically infers the types of properties added/removed to that object. Adding \", React.createElement(_components.code, null, \"extends Object\"), \" restricts the type captured to be an object, not anything else. Interfaces can also be made generic. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"const doSomething = <T extends object>(someObj: T) => { // It can be any letter, but people prefer T\\n    let uid = Math.floor(Math.random() * 100);\\n    return { ...obj, uid };\\n} \\nlet someVar = doSomething({ name: 'John', age: 40 }); // this can be any object with anything passed to function\\nconsole.log(someVar.name); // TypeScript automatically infers the properties present in someVar\\n\\ninterface Resource<T> { // T can extend anything, like object,string or array\\n    resourceName: string;\\n    data: T;\\n}\\n// variables implementing this interface can use anything for T, like: Resource<string>, Resource<object> etc.\\n\")), \"\\n\", React.createElement(_components.p, null, \"Generics are like function arguments, but applied for types in class/function definitions. They allow us to define the type of a property/argument/return value at a future point, and are used heavily while writing reusable code. TypeScript also supports type inference for Generics. The identifier used in generics (example: T) can extend any interface, which basically promises TypeScript that the identifier will always contain properties and methods defined in that interface. This is called Generic Constraint, which limits the types that can be passed to the identifier.\"), \"\\n\", React.createElement(_components.h2, null, \"Enums and Tuples\"), \"\\n\", React.createElement(_components.p, null, \"Enums are a special type in TypeScript which allows to store a set of constants or keywords and associate them with a numeric value. Enum is a way to specify descriptive constants and associate each one with a numeric value. Enums follow near-identical syntax rules as normal objects, and they are used whenever we have a small fixed set of values that are all closely related and known at compile time. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"enum MovieType { ACTION, ADVENTURE, ROMANCE, COMEDY, DRAMA };\\nlet someVar: MovieType = MovieType.DRAMA; // outputs 4 in console.log\\n\")), \"\\n\", React.createElement(_components.p, null, \"Tuples are similar to arrays, having same array methods, but the major difference is that the types of data in each position in a tuple is fixed once it has been initialized. A tuple is an array-like structure where each element represents some property of a record. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"let someTup: [string, number, boolean] = ['John', 26, true]; // now changing types at different positions is not allowed \\n\")), \"\\n\", React.createElement(_components.h2, null, \"Type Definitions\"), \"\\n\", React.createElement(_components.p, null, \"TypeScript has two main kinds of files. \", React.createElement(_components.code, null, \".ts\"), \" files are implementation files that contain types and executable code. These are the files that produce \", React.createElement(_components.code, null, \".js\"), \" outputs, and are where we would normally write our code. \", React.createElement(_components.code, null, \".d.ts\"), \" files are declaration files that contain only type information. These files don’t produce \", React.createElement(_components.code, null, \".js\"), \" outputs; they are only used for typechecking.\"), \"\\n\", React.createElement(_components.p, null, \"TypeScript includes declaration files for all of the standardized built-in APIs available in JavaScript runtimes. This includes things like methods and properties of built-in types like string or function, top-level names like Math and Object, and their associated types. By default, TypeScript also includes types for things available when running inside the browser, such as window and document; these are collectively referred to as the DOM APIs. TypeScript names these declaration files with the pattern \", React.createElement(_components.code, null, \"lib.[something].d.ts\"), \". If we navigate into a file with that name, we can know that we’re dealing with some built-in part of the platform, not user code.\"), \"\\n\", React.createElement(_components.p, null, \"If a library we’re using is published as an npm package, it may or may not include type declaration files as part of its distribution. If it doesn't include these files, TypeScript cannot figure out what different types of values are being used in this library code. To overcome this, type definition files are used. A \", React.createElement(_components.strong, null, \"type definition file\"), \" is like an adapter between our TypeScript code and the JavaScript libraries that we try to work with. A type definition file tells the TypeScript compiler about all the different functions that are available inside this JavaScript library, what type of argument they receive and what type of value they return.\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.a, {\n    href: \"https://github.com/DefinitelyTyped/DefinitelyTyped\"\n  }, \"DefinitelyTyped\"), \" repository is a centralized repo storing declaration files for thousands of libraries. The vast majority of commonly-used libraries have declaration files available on DefinitelyTyped. Definitions on DefinitelyTyped are also automatically published to npm under the \", React.createElement(_components.code, null, \"@types\"), \" scope. The name of the types package is always the same as the name of the underlying package itself. TypeScript automatically finds type definitions under \", React.createElement(_components.code, null, \"node_modules/@types\"), \", so there’s no other step needed to get these types available in our program.\"), \"\\n\", React.createElement(_components.h2, null, \"Abstract Classes\"), \"\\n\", React.createElement(_components.p, null, \"Abstract Classes cannot be used to create an object/instance directly. They can only be used as a parent class, and they can contain real implementation for some methods. The implemented methods can refer to other methods that don't actually exist yet (we still have to provide names and types for the un-implemented methods). Abstract class can make child classes promise to implement some other method. 'abstract' keyword is used to mark methods as those that do exist, and will be eventually defined in the child classes. Inherited abstract members from a parent class should have the exact same names as those declared in parent class.\"), \"\\n\", React.createElement(_components.p, null, \"Differences between interfaces and abstract classes: interfaces promote loose coupling, and can be used when we have very different objects that we want to work together; abstract classes strongly couple classes together, and typically used when we're trying to build up a definition of an object. Inheritances are characterized by an 'is a' relationship between 2 classes, while compositions are characterized by a 'has a' relationship between 2 classes. Delegation pattern is a way of implementing composition.\"), \"\\n\", React.createElement(_components.h2, null, \"Decorators\"), \"\\n\", React.createElement(_components.p, null, \"Decorators are an experimental feature that may change in future releases. They are functions that can be used to modify/change different properties/methods in a class. They're not the same as JavaScript decorators, as they can be used inside/on classes only. Understanding the order in which the decorators are ran is the key to learn them. A Decorator is a special kind of declaration that can be attached to a class declaration, method, accessor, property, or parameter. Decorators use the form \", React.createElement(_components.code, null, \"@expression\"), \", where expression must evaluate to a function that will be called at runtime with information about the decorated declaration.\"), \"\\n\", React.createElement(_components.p, null, \"Decorators on a property, method or accessor have the first argument as the prototype of the object, second argument as the key of the property/method/accessor of the object, third argument as the property descriptor. Decorators are executed only once; they are ran when the code for the class is executed / class is defined (not when an instance is created). Decorators cannot be used to read the values of any property for any instance of a class, as decorators are executed before the class is instantiated. Decorators can also be applied to static methods, static properties and static accessors as well.\"), \"\\n\", React.createElement(_components.p, null, \"A \", React.createElement(_components.strong, null, \"property descriptor\"), \" is an object that has some configuration options around a property defined on an object. It is actually part of ES5 JavaScript, not TypeScript. It is usually meant to configure a property on another object. Property descriptors for methods have the following options:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"writeable: whether or not this property can be changed\"), \"\\n\", React.createElement(_components.li, null, \"enumerable: whether or not this property can get looped over by a 'for...in'\"), \"\\n\", React.createElement(_components.li, null, \"value: current value\"), \"\\n\", React.createElement(_components.li, null, \"configurable: whether or not the property definition can be changed and property can be deleted\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Object.getOwnPropertyDescriptor(obj, <obj's property as a string>)\"), \" can provide a property descriptor containing the above options for any object. To change the property descriptor, use \", React.createElement(_components.code, null, \"Object.defineProperty(obj, <obj's property as a string>, <new definition obj with any/all of the options above>)\"), \". We cannot use target and key arguments of decorator to directly override any object's prototype as TypeScript internally applies a property descriptor back to the prototype once a decorator is called. Hence, the third argument of decorator - Property Descriptor is used to achieve this functionality.\"), \"\\n\", React.createElement(_components.p, null, \"If we want to customize how a decorator is applied to a declaration, we can write a decorator factory. A Decorator Factory is simply a function that returns the expression that will be called by the decorator at runtime. Multiple decorators can be applied to a declaration, for example on a single line. When multiple decorators apply to a single declaration, their evaluation is similar to function composition in mathematics. Example:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"@classDecorator\\nclass Boat {\\n  @testDecorator\\n  color: string = 'red';\\n\\n  @testDecorator\\n  get formattedColor(): string {\\n    return `This boats color is ${this.color}`;\\n  }\\n\\n  @logError('Something bad!')\\n  pilot(\\n    @parameterDecorator speed: string,\\n    @parameterDecorator generateWake: boolean\\n  ): void {\\n    if (speed === 'fast') {\\n      console.log('swish');\\n    } else {\\n      console.log('nothing');\\n    }\\n  }\\n}\\n\\n// this is a class decorator which is applied to the class itself\\n// the only argument to this, is the constructor of that class \\nfunction classDecorator(constructor: typeof Boat) {\\n  console.log(constructor);\\n}\\n\\n// this is a parameter decorator, where the third argument is the actual index of the argument this decorator is being applied to\\nfunction parameterDecorator(target: any, key: string, index: number) {\\n  console.log(key, index);\\n}\\n\\n// here the 1st argument is prototype of Boat class, i.e., an object with all the functions defined in class Boat\\n// and the 2nd argument is the key/name of the thing to which the decorator is applied\\nfunction testDecorator(target: any, key: string) {\\n  console.log(key);\\n}\\n\\n// this is a decorator factory\\nfunction logError(errorMessage: string) {\\n  // PropertyDescriptor type is globally available in TypeScript\\n  return function(target: any, key: string, desc: PropertyDescriptor): void {\\n    // target[key] = () => {}   !!! NOT ALLOWED\\n    const method = desc.value;\\n\\n    // modifying the PropertyDescriptor of the decorated function to better handle errors\\n    desc.value = function() {\\n      try {\\n        method();\\n      } catch (e) {\\n        console.log(errorMessage);\\n      }\\n    };\\n  };\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Credits & Attributions\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.typescriptlang.org/docs\"\n  }, \"Official TypeScript Documentation\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.youtube.com/playlist?list=PL4cUxeGkcC9gUgr39Q_yD6v-bSyMwKPUI\"\n  }, \"TypeScript Tutorial\"), \" by The Net Ninja\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/ruminations/ruminations/content/posts/typescript/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Object","assign","_objectDestructuringEmpty","Post","_createMdxContent","_components","h2","ul","li","pre","code","p","ol","strong","br","_provideComponents","components","className","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name"],"sourceRoot":""}